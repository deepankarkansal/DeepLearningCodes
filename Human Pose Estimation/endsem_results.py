# -*- coding: utf-8 -*-
"""Endsem_Results.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JMDKlI0g1F_TvCPsZktDOYK4nAKn4sdd

# Mount the drive
"""

from google.colab import drive
drive.mount('/content/drive')

"""# Importing libraries"""

import pandas as pd
import requests
import numpy as np
from scipy import io as spio
import matplotlib.colors as mcolors
import os
import cv2
from sklearn.manifold import TSNE
import matplotlib.pyplot as plt
import seaborn as sn
from google.colab import files
from scipy.io import loadmat
import io
from PIL import Image
import joblib
import tensorflow as tf
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
# import wfdb
from sklearn.metrics import confusion_matrix
import seaborn as sns
import ast
from keras import regularizers
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import roc_auc_score
from sklearn import metrics
from sklearn.tree import DecisionTreeClassifier
from imblearn.under_sampling import RandomUnderSampler, TomekLinks 
from imblearn.over_sampling import RandomOverSampler, SMOTE
from keras import layers
from keras.models import Model
from keras.layers import Input
from keras.layers import Conv2D, BatchNormalization, Flatten, Dense, Convolution2D
from keras.layers import MaxPool2D, ZeroPadding2D, MaxPooling2D
from keras.layers import Dropout
from keras.layers.merge import concatenate
from keras.utils import plot_model
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow import keras
from keras.utils import np_utils
from keras.callbacks import EarlyStopping
from keras.models import Sequential, load_model
from tensorflow.keras.optimizers import Adam,RMSprop,SGD,Adamax
from keras import regularizers
from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array
from keras.preprocessing.image import ImageDataGenerator
from numpy import expand_dims
import matplotlib.image as mpimg 
from skimage.color import rgb2gray
from keras.applications.resnet50 import ResNet50
from tensorflow.keras.applications.vgg16 import VGG16
from tensorflow.keras.applications.vgg19 import VGG19

"""# 20 & 14 Classification Data"""

poses = {9:'Excercising & cardio in a gym', 
         17:'Dancing & its different forms',
         18:'Couple dance (salsa)',
         23:'Bicycle riding',
         24:'Bicycle racing',
         43:'Carpentering',
         58:'Excercise & weight training',
         70:'Cooking',
         123:'Cutting trees (Foresting)',
         130:'Golf',
         248:'Gymming & cardio',
         252:'Climbing',
         256:'Skipping',
         257:'Gymming & back-body training',
         290:'Skating',
         300:'Skiing',
         313:'Football, playing in a field',
         314:'Baseball',
         364:'Cardio',
         396:'Stretching & Flexing'}

combine_class = {'Excercising & cardio in a gym':0, 'Excercise & weight training':0, 'Gymming & cardio':0, 'Gymming & back-body training':0,
                 'Cardio':0, 'Dancing & its different forms':1, 'Couple dance (salsa)':1, 'Bicycle riding':2, 'Bicycle racing':2, 
                 'Carpentering':3, 'Cooking':4, 'Cutting trees (Foresting)':5, 'Golf':6, 'Climbing':7, 'Skipping':8, 'Skating':9,
                 'Skiing':10, 'Football, playing in a field':11, 'Baseball':12, 'Stretching & Flexing':13}

class_labels = {0:'Excercising & cardio', 1:'Dancing', 2:'Bicycling', 3:'Carpentering', 4:'Cooking', 5:'Cutting trees (Foresting)',
                6:'Golf', 7:'Climbing', 8:'Skipping', 9:'Skating', 10:'Skiing', 11:'Football', 12:'Baseball', 13:'Stretching & Flexing'}

X_train = joblib.load("/content/drive/MyDrive/DL/DL_Project_Data/TrainData_Classification_20")
X_test = joblib.load("/content/drive/MyDrive/DL/DL_Project_Data/TestData_Classification_20")
y_train = joblib.load("/content/drive/MyDrive/DL/DL_Project_Data/TrainData_Classification_20_labels")
y_test = joblib.load("/content/drive/MyDrive/DL/DL_Project_Data/TestData_Classification_20_labels")

for i in range(len(y_train)): # Combining common labels for 14 classes
  y_train[i] = combine_class[y_train[i]]
for i in range(len(y_test)):
  y_test[i] = combine_class[y_test[i]]

le = LabelEncoder()
y_train = le.fit_transform(y_train)
y_test = le.transform(y_test)

class_labels = le.classes_ # for 20 classes
print(class_labels)
print(len(class_labels))

def shuffling(X, y):
  data = pd.DataFrame(X.reshape(X.shape[0], X.shape[1]*X.shape[2]*X.shape[3]))
  data['label'] = y
  data = data.sample(frac=1, random_state=42)
  X = data.iloc[:, :-1].values.reshape(X.shape[0], X.shape[1], X.shape[2], X.shape[3])
  y = data.iloc[:, -1].values
  return X, y

X_train1, y_train1 = shuffling(np.array(X_train), y_train)

X_test, y_test = shuffling(np.array(X_test), y_test)

num_classes = np.unique(y_train1).shape[0]
y_train11 = np_utils.to_categorical(y_train1, num_classes)
y_test1 = np_utils.to_categorical(y_test, num_classes)

"""# Augmented data """

img_size = 224
train_datagen = ImageDataGenerator(rescale = 1./255)

train_generator = train_datagen.flow_from_directory(directory = '/content/drive/MyDrive/DL/train1',
                                                    target_size = (img_size,img_size),
                                                    batch_size=30, 
                                                    class_mode="sparse",
                                                    subset = "training")

validation_datagen = ImageDataGenerator(rescale = 1./255, validation_split = .9999)

validation_generator = validation_datagen.flow_from_directory(directory = '/content/drive/MyDrive/DL/test_1',
                                                              target_size = (img_size,img_size),
                                                              batch_size=30, class_mode="sparse",
                                                              subset = "validation")

validation_generator1 = validation_datagen.flow_from_directory(directory = '/content/drive/MyDrive/DL/test_1',
                                                              target_size = (img_size,img_size),
                                                              batch_size=30, class_mode="sparse",shuffle=False,
                                                              subset = "validation")

train_generator50 = train_datagen.flow_from_directory(directory = '/content/drive/MyDrive/DL/train50',
                                                    target_size = (img_size,img_size),
                                                    batch_size=30, 
                                                    class_mode="sparse",
                                                    subset = "training")

validation_generator50 = validation_datagen.flow_from_directory(directory = '/content/drive/MyDrive/DL/test50',
                                                              target_size = (img_size,img_size),
                                                              batch_size=30, class_mode="sparse",
                                                              subset = "validation")

validation_generator50_1 = validation_datagen.flow_from_directory(directory = '/content/drive/MyDrive/DL/test50',
                                                              target_size = (img_size,img_size),
                                                              batch_size=30, class_mode="sparse",shuffle=False,
                                                              subset = "validation")

"""# 50 Classes Data"""

X_train = joblib.load('/content/drive/MyDrive/DL/DL_Project_Data/Regression_train_50')
y_train = joblib.load('/content/drive/MyDrive/DL/DL_Project_Data/Regression_train_IDS_50')
X_test = joblib.load('/content/drive/MyDrive/DL/DL_Project_Data/Regression_test_50')
y_test = joblib.load('/content/drive/MyDrive/DL/DL_Project_Data/Regression_test_IDS_50')

data = pd.read_csv('/content/drive/MyDrive/DL/mpii_dataset.csv')
data

image_name = data.iloc[:, 1].values
image_lbl = data.iloc[:, -2].values
image_cat = data.iloc[:, -1].values

def take_Labels_Categories(y):
  y1 = []
  for i in range(len(y)):
    for j in range(len(image_name)):
      if y[i] == image_name[j]:
        # y1.append((image_lbl[j], image_cat[j]))
        y1.append(image_lbl[j])
        break
  return np.array(y1)

y_train1 = take_Labels_Categories(y_train)

y_test1 = take_Labels_Categories(y_test)

plt.imshow(X_test[110])
print(y_test1[110])

le = LabelEncoder()
y_train = le.fit_transform(y_train1)
y_test = le.transform(y_test1)

class_labels = le.classes_

class_labels

num_classes = np.unique(y_train1).shape[0]
y_train11 = np_utils.to_categorical(y_train, num_classes)
y_test11 = np_utils.to_categorical(y_test, num_classes)

"""## Creating Labels For Regression"""

data1 = data.iloc[:,:].values

cl1 = data1[:, 1]
cl2 = data1[:, -2]

data1 = data1[:, 2:-3]

def create_labels(y_train):
  y = []
  for j in range(len(y_train)):
    for i in range(len(cl1)):
      if y_train[j] == cl1[i]:
        y.append(data1[i])
        break
  return np.array(y)

y_train1 = create_labels(y_train)
y_test1 = create_labels(y_test)

y_test1.shape, y_train1.shape

y_test1 = y_test1.astype('float')
y_train1 = y_train1.astype('float')

"""# Model Results"""

model = load_model('/content/drive/MyDrive/DL/DL_Project_Data/Human_Pose_Models/Classification_Models/resnet50_On14_Classes.h5')

predictions = model.predict(X_test)
y_pred = np.argmax(predictions, axis = 1)

index_good = []
index_bad = []
for i in range(len(y_test)):
  if (y_test[i] == y_pred[i]):
    index_good.append(i)
  else:
    index_bad.append(i)

len(index_bad), len(index_good)

"""### Miss-Classification results"""

indx = 2
plt.imshow(X_test[index_bad[indx]])
print('Predicted Pose:',class_labels[y_pred[index_bad[indx]]]) 
print('Actual Pose:',class_labels[y_test[index_bad[indx]]])

indx = 140
plt.imshow(X_test[index_bad[indx]])
print('Predicted Pose:',class_labels[y_pred[index_bad[indx]]]) 
print('Actual Pose:',class_labels[y_test[index_bad[indx]]])

indx = 16
plt.imshow(X_test[index_bad[indx]])
print('Predicted Pose:',class_labels[y_pred[index_bad[indx]]]) 
print('Actual Pose:',class_labels[y_test[index_bad[indx]]])

indx = 50
plt.imshow(X_test[index_bad[indx]])
print('Predicted Pose:',class_labels[y_pred[index_bad[indx]]]) 
print('Actual Pose:',class_labels[y_test[index_bad[indx]]])

"""### Correct-Classification results"""

indx = 2
plt.imshow(X_test[index_good[indx]])
print('Predicted Pose:',class_labels[y_pred[index_good[indx]]]) 
print('Actual Pose:',class_labels[y_test[index_good[indx]]])

indx = 140
plt.imshow(X_test[index_good[indx]])
print('Predicted Pose:',class_labels[y_pred[index_good[indx]]]) 
print('Actual Pose:',class_labels[y_test[index_good[indx]]])

indx = 200
plt.imshow(X_test[index_good[indx]])
print('Predicted Pose:',class_labels[y_pred[index_good[indx]]]) 
print('Actual Pose:',class_labels[y_test[index_good[indx]]])

indx = 500
plt.imshow(X_test[index_good[indx]])
print('Predicted Pose:',class_labels[y_pred[index_good[indx]]]) 
print('Actual Pose:',class_labels[y_test[index_good[indx]]])

"""### On Random Images"""

# url = 'https://cdni0.trtworld.com/w960/h540/q75/31524_PRT180417PolandBialowiezaForestAFP_1523966626524.jpg'
# url = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR7M2LNu-GgW-FGWGd1qfFQF3iWADp9i_Aw7g&usqp=CAU'
# url = 'https://imgk.timesnownews.com/story/skipping-rope-new.gif?tr=w-1200,h-900'

url = 'https://upload.wikimedia.org/wikipedia/commons/2/2d/2018_Skate_Canada_-_Evelyn_Walsh_%26_Trennt_Michaud_-_12.jpg'

# url = 'https://scuolasciarabba.com/files/.thumbs/adventure_skiing/640x960a/adventure_skiing_153.jpg'
# url = 'https://imagevars.gulfnews.com/2020/03/18/Excercise_170ecac1afc_medium.jpg'
# url = 'https://cdn.24.co.za/files/Cms/General/d/7325/d084e41c286e48bcae4063a70662d675.png'
# url = 'https://s3.ap-southeast-1.amazonaws.com/images.deccanchronicle.com/dc-Cover-bsnudco08r3igtj44duecnr7m4-20170803070833.Medi.jpeg'
# url = 'https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/cycle-rider-riding-hard-along-the-beach-royalty-free-image-1616705538.?crop=0.668xw:1.00xh;0.332xw,0&resize=640:*'
# url = 'https://c8.alamy.com/comp/XDT1YJ/boy-inline-skating-outdoors-XDT1YJ.jpg'

img = Image.open(requests.get(url, stream=True).raw)
print(type(img))

print(img.format)
print(img.size)
print(img.mode)

img1 = np.array(img)
img1 = cv2.resize(img1, (224, 224))
img1 = np.array(img1, ndmin=4)

predictions = model_vgg19_1.predict(img1)
y_pred = np.argmax(predictions, axis = 1)
plt.imshow(img1[0])
print('Predicted Pose:',class_labels[y_pred[0]])

"""### Xception"""

XModel = load_model('/content/drive/MyDrive/DL/DL_Project_Data/Human_Pose_Models/Classification_Models/Xception_On20_Classes.h5')

pred=XModel.predict_generator(validation_generator1)
predicted_class_indices=np.argmax(pred,axis=1)
labels = (validation_generator1.class_indices)
labels = dict((v,k) for k,v in labels.items())
predictions = [labels[k] for k in predicted_class_indices]
plabel=[]
for i in predictions:
  for m,n in poses.items():
    m=str(m)
    if m==i:
      plabel.append(n)

y_true = validation_generator1.classes
truth = []
pred = []

for i in range(30):
    x, y = next(validation_generator1)
    pred.append(XModel.predict(x))
    truth.append(y) 

pred = np.concatenate(pred)
truth = np.concatenate(truth)
predicted_class=np.argmax(pred,axis=1)

from keras.preprocessing import image
import matplotlib.pyplot as plt
count=0
for ii in range(5):  #for first 5 batches
  x,y = validation_generator1[ii]
  for i in range(0,30):
      image = x[i]
      label = y[i]
      print(plabel[count])
      count+=1
      plt.imshow(image)
      plt.show()

"""### Xception50"""

XModel_50 = load_model('/content/drive/MyDrive/DL/DL_Project_Data/Human_Pose_Models/Classification_Models/Xception_On50_Classes.h5')

pred=XModel_50.predict_generator(validation_generator50_1)
predicted_class_indices=np.argmax(pred,axis=1)
labels = (validation_generator50_1.class_indices)
labels = dict((v,k) for k,v in labels.items())
predictions = [labels[k] for k in predicted_class_indices]
predictions

"""# Image Joints Visualization"""

def imag(ix, df, pred=None):
    img = df['NAME'][ix]
    print(img)
    flag = 0
    path = ""
    for root, dirs, files in os.walk('/content/drive/MyDrive/DL/DL_Project_Data'):
      for file in files:
        if img == file:
          flag=1
          path = os.path.join(root, file)
          break
      if flag==1:
        break
    print(path)
    im = Image.open(path)
    print(im.size)
    implot = plt.imshow(im)
    
    try:
      i=0
      while i < pred.size:
          # col = df.columns[px]
          x = pred[i]
          i+=1
          # col = df.columns[px+1]
          y = pred[i]
          i+=1
          # print(col,x,y)
          plt.scatter([[x]],[[y]])
    
    except:
      px=2
      
      while px <34:
          col = df.columns[px]
          x = df[col][ix]
          col = df.columns[px+1]
          y = df[col][ix]
          print(col,x,y)
          plt.scatter([[x]],[[y]])
          px=px+2

"""## Regression Predictions"""

for i in range(len(data)):
  if data['NAME'][i] == y_test[110]:
    print(i)
    break

imag(13784, data)

reg = load_model('/content/drive/MyDrive/DL/DL_Project_Data/Human_Pose_Models/Our Models/Regression_CNN.h5')

y_pred = reg.predict(X_test)

data.loc[13784]

y_pred[110]

imag(13784, data, y_pred[110]) # Model Predictions

"""## Regression Predictions"""

for i in range(len(data)):
  if data['NAME'][i] == y_test[3]:
    print(i)
    break

imag(9728, data)

# reg = load_model('/content/drive/MyDrive/DL/DL_Project_Data/Regression_Baseline.h5')
reg = load_model('/content/drive/MyDrive/DL/DL_Project_Data/Regression_ResNET50.h5')

y_pred = reg.predict(X_test)

data.loc[9728]

y_pred[3]

imag(9728, data, y_pred[3]) # Model Predictions

y_pred = resnet_model.predict(X_test)

imag(9728, data, y_pred[3])

"""## Random Images"""

def image_Scattering(im, pred):
    
    implot = plt.imshow(im)
    
    i=0
    while i < pred.size:
        
        x = pred[i]
        i+=1
        y = pred[i]
        i+=1
        
        plt.scatter([[np.max(x-200, 0)]],[[y]])

# url = 'https://cdni0.trtworld.com/w960/h540/q75/31524_PRT180417PolandBialowiezaForestAFP_1523966626524.jpg'
# url = 'https://imgk.timesnownews.com/story/skipping-rope-new.gif?tr=w-1200,h-900'

# url = 'https://scuolasciarabba.com/files/.thumbs/adventure_skiing/640x960a/adventure_skiing_153.jpg'
# url = 'https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/cycle-rider-riding-hard-along-the-beach-royalty-free-image-1616705538.?crop=0.668xw:1.00xh;0.332xw,0&resize=640:*'
# url = 'https://c8.alamy.com/comp/XDT1YJ/boy-inline-skating-outdoors-XDT1YJ.jpg'

img = Image.open(requests.get(url, stream=True).raw)
print(type(img))

print(img.format)
print(img.size)
print(img.mode)

img1 = np.array(img)
img1 = cv2.resize(img1, (224, 224))
img1 = np.array(img1, ndmin=4)

predictions = reg.predict(img1)

image_Scattering(img, predictions[0])